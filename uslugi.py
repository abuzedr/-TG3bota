# ce uslugi blya
from asyncio.log import logger
from datetime import datetime
from aiogram import Bot, Dispatcher, Router
from aiogram.types import (InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery,
                          ReplyKeyboardMarkup, KeyboardButton)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram import F
from aiogram.types import Message
from aiogram.types import BotCommand, BotCommandScopeDefault
from aiogram.client.default import DefaultBotProperties
import aiohttp

API_TOKEN = "7802098774:AAG9Jec3E5v_Hk8Fg3F-pTalxMJZ-wAteXk"
CRYPTOBOT_TOKEN = "332687:AA3xGRAM6IJGHmFj3ZEAIz570WsOjBfG567"
CRYPTOBOT_API_URL = "https://pay.crypt.bot/api"
MANAGERS_GROUP_ID = "-1002423702325"
BINANCE_ID = "756008063"
BYBIT_ID = "310554555"
CRYPTOBOT_USERNAME = "@CryptoBot"

ADMIN_USERNAME = "@iminternethero" # na vsyakiy sluchay

SERVICE_PRICES = {
    "unban": 250,
    "fast_post": 100,
    "delete_post": 300,
    "find_sender": 200,
    "moderator_rights": 1000,
    "reserve": 500
}

SERVICE_NAMES = {
    "unban": "–†–∞–∑–±–∞–Ω üôè",
    "fast_post": "–ü–æ—Å—Ç –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏ üì•",
    "delete_post": "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ üóë",
    "find_sender": "–£–∑–Ω–∞—Ç—å –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ—Å—Ç üëÄ",
    "moderator_rights": "–ü—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞ üëë",
    "reserve": "–ë—Ä–æ–Ω—å üõ°"
}

bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

class OrderProcess(StatesGroup):
    username = State()
    service = State()
    payment_method = State()
    chat_selection = State()
    post_content = State()
    post_media = State()
    post_preview = State()
    post_link = State()
    payment_screenshot = State()
    moderator_info = State()

class SenderInfoState(StatesGroup):
    waiting_for_info = State()
    confirming_info = State()

usernames = {}

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéØ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")],
            [KeyboardButton(text="üë§ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
        ],
        resize_keyboard=True,
        is_persistent=True
    )
    return keyboard

PAYMENT_INFO = {
    "Binance": {"name": "Binance", "id": BINANCE_ID},
    "ByBit": {"name": "ByBit", "id": BYBIT_ID},
    "CryptoBot": {"name": "CryptoBot"},
    "FunPay": {"name": "FunPay"}
}

FUNPAY_LINKS = {
    "moderator_rights": "https://funpay.com/lots/offer?id=37537259",
    "reserve": "https://funpay.com/lots/offer?id=37537032",
    "fast_post": "https://funpay.com/lots/offer?id=37536907",
    "find_sender": "https://funpay.com/lots/offer?id=37536858",
    "delete_post": "https://funpay.com/lots/offer?id=37536800",
    "unban": "https://funpay.com/lots/offer?id=37536658"
}

def payment_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="Binance", callback_data="Binance")],
        [InlineKeyboardButton(text="ByBit", callback_data="ByBit")],
        [InlineKeyboardButton(text="CryptoBot", callback_data="CryptoBot")],
        [InlineKeyboardButton(text="FunPay", callback_data="FunPay")]
    ])

def get_chat_list_markup():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü–µ—Ä–º—å", callback_data="chat_1")],
        [InlineKeyboardButton(text="–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", callback_data="chat_2")],
        [InlineKeyboardButton(text="–ö–∞–∑–∞–Ω—å", callback_data="chat_3")],
        [InlineKeyboardButton(text="–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", callback_data="chat_4")],
        [InlineKeyboardButton(text="–°–∞—Ä–∞—Ç–æ–≤", callback_data="chat_5")]
    ])

def service_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–∞–∑–±–∞–Ω üôè", callback_data="unban")],
        [InlineKeyboardButton(text="–ü–æ—Å—Ç –±–µ–∑ –æ—á–µ—Ä–µ–¥–∏ üì•", callback_data="fast_post")],
        [InlineKeyboardButton(text="–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ üóë", callback_data="delete_post")],
        [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å –∫—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ—Å—Ç üëÄ", callback_data="find_sender")],
        [InlineKeyboardButton(text="–ü—Ä–∞–≤–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ —á–∞—Ç–∞ üëë", callback_data="moderator_rights")],
        [InlineKeyboardButton(text="–ë—Ä–æ–Ω—å üõ°", callback_data="reserve")]
    ])

def get_start_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É")]],
        resize_keyboard=True,
        is_persistent=True
    )
    return keyboard

@router.message(lambda message: message.text == "–û—Ç–º–µ–Ω–∏—Ç—å —É—Å–ª—É–≥—É")
async def cancel_service(message: Message, state: FSMContext):
    current_state = await state.get_state()
    
    if not current_state or current_state == OrderProcess.username:
        await message.answer(
            "‚ùå –ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É.",
            reply_markup=service_keyboard()
        )
        return
    
    await state.clear()
    await message.answer(
        "–ó–∞—è–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —É—Å–ª—É–≥—É:",
        reply_markup=service_keyboard()
    )
    await state.set_state(OrderProcess.service)

@router.message(lambda message: message.text == "–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —É—Å–ª—É–≥—É")
async def start_new_service(message: Message, state: FSMContext):
    current_state = await state.get_state()
    
    if current_state == OrderProcess.username:
        return
    
    if not current_state or current_state == OrderProcess.service:
        return
    
    data = await state.get_data()
    username = data.get('username')
    
    if not username:
        await message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
        )
        await state.clear()
        await state.set_state(OrderProcess.username)
        return
    
    await state.clear()
    await state.update_data(username=username)
    await message.answer(
        f"‚úÖ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —É—Å–ª—É–≥—É\n"
        f"Username –¥–ª—è —Å–≤—è–∑–∏: @{username}",
        reply_markup=service_keyboard()
    )
    await state.set_state(OrderProcess.service)

@router.message(Command("start"))
async def start(message: Message, state: FSMContext):
    if message.chat.type != 'private':
        return
        
    user_id = message.from_user.id
    username = usernames.get(user_id)
    
    if username:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç!üëã\n\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π username: @{username}\n\n"
            "–ù–∞–∂–º–∏—Ç–µ üéØ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –∏–ª–∏ üë§ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è username.",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç!üëã\n\n"
            "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π Telegram username (–±–µ–∑ @).\n"
            "–≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ username –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏.\n\n"
            "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: @username, https://t.me/username\n"
            "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: username",
            link_preview_options={"is_disabled": True},
            reply_markup=get_main_keyboard()
        )
        await state.set_state(OrderProcess.username)

@router.message(lambda message: message.text == "üéØ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = usernames.get(user_id)
    
    if not username:
        await message.answer(
            "‚ùå –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å–ª—É–≥–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å username.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üë§ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
        )
        return
    
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:\n"
        f"–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å: @{username}",
        reply_markup=service_keyboard()
    )
    await state.set_state(OrderProcess.service)

@router.message(lambda message: message.text == "üë§ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å")
async def change_profile(message: Message, state: FSMContext):
    await message.answer(
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï! –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π Telegram username (–±–µ–∑ @).\n"
        "–≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ username –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏.\n\n"
        "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ: @username, https://t.me/username\n"
        "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ: username",
        link_preview_options={"is_disabled": True}
    )
    await state.set_state(OrderProcess.username)

@router.message(lambda message: message.text == "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def support(message: Message):
    await message.answer(
        "üõ† –ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –∏–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π!\n\n"
        "üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º —Å—é–¥–∞: @zerkalosupportbot\n\n"
        "üì© –ú—ã –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏–ª–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
    )
 
BLACKLIST_WORDS = [
    "sa1tem", "start"
]

def validate_username(username: str) -> tuple[bool, str]:
    username = username.lower().strip()
    
    if not username:
        return False, "Username –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
    
    if username.startswith('@'):
        username = username[1:]
    
    if ' ' in username or not all(c.isalnum() or c == '_' for c in username):
        return False, "Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ _ (–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ)"
    
    if len(username) < 5:
        return False, "Username –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 5 —Å–∏–º–≤–æ–ª–æ–≤"
        
    if len(username) > 32:
        return False, "Username –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 32 —Å–∏–º–≤–æ–ª–∞"
    
    blacklist_words = [
        "–Ω–∞—á–∞—Ç—å", "–Ω–æ–≤—É—é", "—É—Å–ª—É–≥—É", "start"
    ]
    
    for word in blacklist_words:
        if word in username:
            return False, f"Username –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–æ–≤–æ: {word}"
    
    if username[0].isdigit():
        return False, "Username –Ω–µ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ü–∏—Ñ—Ä—ã"
    
    if not all(c.isascii() for c in username):
        return False, "Username –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã"
    
    return True, username

@router.message(OrderProcess.username)
async def get_username(message: Message, state: FSMContext):
    username = message.text.strip()
    is_valid, result = validate_username(username)
    
    if not is_valid:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞: {result}\n"
            "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π username."
        )
        return
    
    user_id = message.from_user.id
    usernames[user_id] = result
    
    await state.update_data(username=result)
    await message.answer(
        f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω\n"
        f"–í–∞—à username: @{result}\n\n"
        "–ù–∞–∂–º–∏—Ç–µ üéØ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏",
        reply_markup=get_main_keyboard()
    )

@router.callback_query(F.data.in_(["unban", "fast_post", "delete_post", "find_sender", "moderator_rights", "reserve"]))
async def handle_service_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    username = usernames.get(user_id)
    
    if not username:
        await callback.message.answer(
            "‚ùå –î–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å username.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üë§ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
        )
        return
    
    service = callback.data
    amount = SERVICE_PRICES[service]
    
    await state.update_data(
        service=SERVICE_NAMES[service],
        amount=amount,
        username=username
    )
    
    service_message = (
        f"–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: {SERVICE_NAMES[service]}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {amount} —Ä—É–±–ª–µ–π\n"
        f"Username –¥–ª—è —Å–≤—è–∑–∏: @{username}\n\n"
    )
    
    if service == "find_sender":
        await callback.message.answer(
            service_message +
            "‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç:"
        )
        await state.set_state(OrderProcess.post_link)
    elif service == "delete_post":
        await callback.message.answer(
            service_message +
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å:"
        )
        await state.set_state(OrderProcess.post_link)
    elif service == "reserve":
        await callback.message.answer(
            service_message +
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=payment_keyboard()
        )
        await state.set_state(OrderProcess.payment_method)
    elif service == "moderator_rights":
        await callback.message.answer(
            service_message +
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç:",
            reply_markup=get_chat_list_markup()
        )
        await state.set_state(OrderProcess.chat_selection)
    elif service == "fast_post":
        await callback.message.answer(
            service_message +
            "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç, –≤ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç:",
            reply_markup=get_chat_list_markup()
        )
        await state.set_state(OrderProcess.chat_selection)
    else:
        if service == "unban":
            await callback.message.answer(
                service_message +
                "–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è —Ä–∞–∑–±–∞–Ω–∞:",
                reply_markup=get_chat_list_markup()
            )
            await state.set_state(OrderProcess.chat_selection)
        else:
            await callback.message.answer(
                service_message +
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã:",
                reply_markup=payment_keyboard()
            )
            await state.set_state(OrderProcess.payment_method)

@router.message(OrderProcess.post_link)
async def handle_post_link(message: Message, state: FSMContext):
    link = message.text.strip()
    data = await state.get_data()
    service = data.get('service')
    
    if not link:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É")
        return
    
    await state.update_data(post_link=link)
    
    if service == SERVICE_NAMES["find_sender"]:
        amount = SERVICE_PRICES["find_sender"]
        await message.answer(
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: {amount} —Ä—É–±–ª–µ–π\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=payment_keyboard()
        )
        await state.set_state(OrderProcess.payment_method)
    else:
        await message.answer(
            "–°—Å—ã–ª–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=payment_keyboard()
        )
        await state.set_state(OrderProcess.payment_method)

@router.callback_query(F.data.startswith("chat_"))
async def handle_chat_selection(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    chat_name = {
        "chat_1": "–ü–µ—Ä–º—å",
        "chat_2": "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫",
        "chat_3": "–ö–∞–∑–∞–Ω—å",
        "chat_4": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä",
        "chat_5": "–°–∞—Ä–∞—Ç–æ–≤"
    }.get(callback.data)
    
    data = await state.get_data()
    service = data.get('service')
    await state.update_data(chat_name=chat_name)

    if service == SERVICE_NAMES["fast_post"]:
        await callback.message.answer(
            f"–í—ã–±—Ä–∞–Ω —á–∞—Ç: {chat_name}\n"
            "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø–æ—Å—Ç (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ):"
        )
        await state.set_state(OrderProcess.post_content)
    elif service == SERVICE_NAMES["moderator_rights"]:
        await callback.message.answer(
            f"–í—ã–±—Ä–∞–Ω —á–∞—Ç: {chat_name}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=payment_keyboard()
        )
        await state.set_state(OrderProcess.payment_method)
    else:
        await callback.message.answer(
            f"–í—ã–±—Ä–∞–Ω —á–∞—Ç: {chat_name}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=payment_keyboard()
        )
        await state.set_state(OrderProcess.payment_method)

class PostContent:
    def __init__(self):
        self.text = ""
        self.media = []

post_contents = {}

@router.message(OrderProcess.post_content)
async def handle_post_content(message: Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in post_contents:
        post_contents[user_id] = PostContent()
    
    content = post_contents[user_id]
    
    if message.text:
        content.text = message.text
    
    if message.photo:
        content.media.append({
            'type': 'photo',
            'file_id': message.photo[-1].file_id
        })
    
    if message.video:
        content.media.append({
            'type': 'video',
            'file_id': message.video.file_id
        })
    
    preview_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëÄ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä", callback_data="preview_post")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="finish_post")],
        [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_post")]
    ])
    
    await message.answer(
        "–ö–æ–Ω—Ç–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=preview_keyboard
    )

@router.callback_query(F.data == "preview_post")
async def show_post_preview(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    content = post_contents.get(user_id)
    
    if not content:
        await callback.message.answer("–û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if content.text:
        await callback.message.answer(f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞:\n\n{content.text}")
    
    for media in content.media:
        if media['type'] == 'photo':
            await callback.message.answer_photo(media['file_id'])
        elif media['type'] == 'video':
            await callback.message.answer_video(media['file_id'])
    
    await callback.message.answer(
        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞.\n"
        "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å - –Ω–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ", callback_data="finish_post")],
            [InlineKeyboardButton(text="üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="restart_post")]
        ])
    )

@router.callback_query(F.data == "restart_post")
async def restart_post(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    if user_id in post_contents:
        del post_contents[user_id]
    
    await callback.message.answer(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–æ—Å—Ç–∞ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ).\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –ø–æ–¥—Ä—è–¥:"
    )
    await state.set_state(OrderProcess.post_content)
@router.callback_query(F.data == "finish_post")
async def finish_post(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    user_id = callback.from_user.id
    content = post_contents.get(user_id)
    
    if not content:
        await callback.message.answer("–û—à–∏–±–∫–∞: –∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await state.update_data(
        post_content=content.text,
        post_media=content.media
    )
    
    await callback.message.answer(
        "–ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=payment_keyboard()
    )
    await state.set_state(OrderProcess.payment_method)

async def send_order_to_managers(data: dict):
    current_time = datetime.now().strftime('%H:%M %d.%m.%Y')
    payment_method = data.get('payment_method', '–ù–µ —É–∫–∞–∑–∞–Ω')
    service = data.get('service')
    
    try:
        screenshot_msg = None
        if 'screenshot_id' in data:
            screenshot_msg = await bot.send_photo(
                chat_id=MANAGERS_GROUP_ID,
                photo=data['screenshot_id'],
                caption="üí≥ –°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã"
            )

        message_text = (
            f"üí´ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{data['username']}\n"
            f"üíé –£—Å–ª—É–≥–∞: {data['service']}\n"
            f"üí∞ –°—É–º–º–∞: {data['amount']} —Ä—É–±–ª–µ–π\n"
            f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}\n"
        )

        if 'payment_info' in data:
            message_text += f"üìù {data['payment_info']}\n"
            
        if 'post_content' in data:
            message_text += f"üìù –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞: {data['post_content']}\n"
        if 'post_link' in data:
            message_text += f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: {data['post_link']}\n"
        if 'chat_name' in data:
            message_text += f"üìç –ß–∞—Ç: {data['chat_name']}\n"
            
        message_text += f"‚è∞ –í—Ä–µ–º—è: {current_time}"
        
        if service == SERVICE_NAMES["find_sender"]:
            verification_keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞", 
                                       callback_data=f"data_available_{data['username']}"),
                    InlineKeyboardButton(text="‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", 
                                       callback_data=f"no_data_{data['username']}")
                ]
            ])
            await bot.send_message(
                chat_id=MANAGERS_GROUP_ID,
                text=message_text,
                reply_markup=verification_keyboard,
                reply_to_message_id=screenshot_msg.message_id if screenshot_msg else None
            )
        else:
            msg = await bot.send_message(
                chat_id=MANAGERS_GROUP_ID,
                text=message_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [
                        InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"approve_{data['username']}"),
                        InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"decline_{data['username']}")
                    ]
                ]),
                reply_to_message_id=screenshot_msg.message_id if screenshot_msg else None
            )

        if 'post_media' in data and screenshot_msg:
            for media in data['post_media']:
                if media['type'] == 'photo':
                    await bot.send_photo(
                        chat_id=MANAGERS_GROUP_ID,
                        photo=media['file_id'],
                        caption="üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–ª—è –ø–æ—Å—Ç–∞",
                        reply_to_message_id=screenshot_msg.message_id
                    )
                elif media['type'] == 'video':
                    await bot.send_video(
                        chat_id=MANAGERS_GROUP_ID,
                        video=media['file_id'],
                        caption="üìé –ú–µ–¥–∏–∞—Ñ–∞–π–ª –¥–ª—è –ø–æ—Å—Ç–∞",
                        reply_to_message_id=screenshot_msg.message_id
                    )
    except Exception as e:
        logger.error(f"Error sending order to managers: {e}")
        raise

@router.callback_query(lambda c: c.data.startswith(("data_available_", "no_data_")))
async def handle_data_verification(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    try:
        action, username = callback.data.rsplit("_", 1)
        is_available = action == "data_available"
        manager = callback.from_user.username
        current_time = datetime.now().strftime('%H:%M %d.%m.%Y')
        
        if is_available:
            await state.update_data(target_username=username)
            await callback.message.edit_text(
                f"{callback.message.text}\n\n"
                f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞\n"
                f"–ü—Ä–æ–≤–µ—Ä–∏–ª: @{manager}\n"
                f"‚è∞ {current_time}"
            )
            await callback.message.answer(
                "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –ø–æ—Å—Ç–∞:"
            )
            await state.set_state(SenderInfoState.waiting_for_info)
            
            user_id = None
            for uid, stored_username in usernames.items():
                if stored_username == username:
                    user_id = uid
                    break
            
            if user_id:
                await bot.send_message(
                    chat_id=user_id,
                    text="‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞–º –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
                )
        else:
            await callback.message.edit_text(
                f"{callback.message.text}\n\n"
                f"‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞\n"
                f"–ü—Ä–æ–≤–µ—Ä–∏–ª: @{manager}\n"
                f"‚è∞ {current_time}"
            )
            
            user_id = None
            for uid, stored_username in usernames.items():
                if stored_username == username:
                    user_id = uid
                    break
            
            if user_id:
                await bot.send_message(
                    chat_id=user_id,
                    text="‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                )
            
    except Exception as e:
        logger.error(f"Data verification error: {e}")
        await callback.message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )

@router.message(SenderInfoState.waiting_for_info)
async def handle_sender_info(message: Message, state: FSMContext):
    data = await state.get_data()
    target_username = data.get('target_username')
    
    preview_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_sender_info")],
        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_sender_info")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="reject_sender_info")]
    ])
    
    await state.update_data(sender_info=message.text)
    
    await message.answer(
        f"–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ:\n\n"
        f"{message.text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=preview_keyboard
    )
    await state.set_state(SenderInfoState.confirming_info)

@router.callback_query(lambda c: c.data in ["confirm_sender_info", "edit_sender_info", "reject_sender_info"])
async def handle_sender_info_action(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    action = callback.data
    data = await state.get_data()
    target_username = data.get('target_username')
    sender_info = data.get('sender_info')

    if action == "confirm_sender_info":
        user_id = None
        for uid, stored_username in usernames.items():
            if stored_username == target_username:
                user_id = uid
                break
                
        if user_id:
            await state.update_data(verified_sender_info=sender_info)
            
            await bot.send_message(
                chat_id=user_id,
                text=(
                    "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –ø–æ—Å—Ç–∞:\n\n"
                    f"{sender_info}"
                )
            )
            
            await callback.message.edit_text(
                f"{callback.message.text}\n"
                "‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
            )
        else:
            await callback.message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    elif action == "edit_sender_info":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ:")
        await state.set_state(SenderInfoState.waiting_for_info)
    
    elif action == "reject_sender_info":
        await callback.message.edit_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
        await state.finish()

@router.callback_query(lambda c: c.data.startswith(("approve_", "decline_")))
async def handle_manager_decision(callback: CallbackQuery):
    await callback.answer()
    try:
        action, username = callback.data.split("_")
        manager = callback.from_user.username
        current_time = datetime.now().strftime('%H:%M %d.%m.%Y')
        
        message_text = callback.message.text
        service_name = None
        for line in message_text.split('\n'):
            if "–£—Å–ª—É–≥–∞:" in line:
                service_name = line.split("–£—Å–ª—É–≥–∞:")[1].strip()
                break

        is_approved = action == "approve"
        status = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ" if is_approved else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"
        
        try:
            await callback.message.edit_text(
                f"{callback.message.text}\n\n"
                f"{status} –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º @{manager}\n"
                f"‚è∞ {current_time}",
                reply_markup=None,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        await update_order_status(username, status)
        
        try:
            users = await db_get_user_info(username)
            if users and users.get('user_id'):
                user_id = users['user_id']
                if is_approved:
                    if service_name == SERVICE_NAMES["find_sender"]:
                        sender_info = await get_sender_info_for_user(username)
                        if sender_info:
                            await bot.send_message(
                                chat_id=user_id,
                                text=(
                                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n"
                                    "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –ø–æ—Å—Ç–∞:\n\n"
                                    f"{sender_info}"
                                )
                            )
                        else:
                            await bot.send_message(
                                chat_id=user_id,
                                text="‚ùå –û—à–∏–±–∫–∞: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
                            )
                    else:
                        await bot.send_message(
                            chat_id=user_id,
                            text=f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É '{service_name}' –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!"
                        )
                else:
                    await bot.send_message(
                        chat_id=user_id,
                        text=f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥—É '{service_name}' –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞"
                    )
            else:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ user_id –¥–ª—è username: {username}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}: {e}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
        await callback.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—à–µ–Ω–∏—è",
            show_alert=True
        )

async def get_sender_info_for_user(username: str) -> str:
    sender_info_storage = {}
    return sender_info_storage.get(username)

order_statuses = {}

async def update_order_status(username: str, new_status: str):
    order_statuses[username] = new_status

async def db_get_user_info(username: str) -> dict:
    for user_id, stored_username in usernames.items():
        if stored_username == username:
            return {"user_id": user_id, "username": username}
    return None

async def create_cryptobot_invoice(amount: int, description: str) -> str:
    async with aiohttp.ClientSession() as session:
        payload = {
            "asset": "USDT",
            "amount": str(amount / 100),
            "description": description,
            "payload": f"invoice_{amount}_{int(datetime.now().timestamp())}"
        }
        headers = {"Crypto-Pay-API-Token": CRYPTOBOT_TOKEN}
        
        async with session.post(
            f"{CRYPTOBOT_API_URL}/createInvoice",
            json=payload,
            headers=headers
        ) as response:
            result = await response.json()
            if result.get("ok"):
                return result["result"]["pay_url"]
            raise Exception(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–≤–æ–π—Å–∞: {result}")

@router.callback_query(F.data.in_(PAYMENT_INFO.keys()))
async def payment_method(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    payment_method = callback.data
    payment_info = PAYMENT_INFO[payment_method]
    data = await state.get_data()
    
    try:
        amount = data.get('amount', 0)
        service = data.get('service', '–£—Å–ª—É–≥–∞')
        
        await state.update_data(payment_method=payment_method)
        
        if payment_method == "FunPay":
            service_key = next((k for k, v in SERVICE_NAMES.items() if v == service), None)
            funpay_link = FUNPAY_LINKS.get(service_key, '')
            await callback.message.answer(f"üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {funpay_link}")
            await state.clear()
            return
            
        elif payment_method == "CryptoBot":
            try:
                payment_url = await create_cryptobot_invoice(
                    amount=amount,
                    description=f"–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏: {service}"
                )
                
                await callback.message.answer(
                    f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_info['name']}\n"
                    f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {amount} RUB ‚âà {amount/100} USDT\n\n"
                    "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–û–ø–ª–∞—Ç–∏—Ç—å¬ª –Ω–∏–∂–µ\n"
                    "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ–ø–ª–∞—Ç—ã\n"
                    "3Ô∏è‚É£ –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞\n"
                    "4Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–Ø –æ–ø–ª–∞—Ç–∏–ª¬ª\n\n",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=f"üí≥ –û–ø–ª–∞—Ç–∏—Ç—å {amount} RUB", url=payment_url)],
                        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="confirm_payment")]
                    ])
                )
            except Exception as e:
                logger.error(f"CryptoBot payment error: {e}")
                await callback.message.answer("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.")
        else:
            user_id = payment_info["id"]
            await callback.message.answer(
                f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_info['name']}\n"
                f"üí∞ –°—É–º–º–∞: {amount} RUB ‚âà {amount/100} USDT\n"
                f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ TX ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:"
            )
            await state.set_state(OrderProcess.payment_screenshot)
            
    except Exception as e:
        logger.error(f"Payment method error: {e}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.")

@router.callback_query(F.data == "confirm_payment")
async def handle_payment_confirmation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    payment_method = data.get('payment_method')
    
    if payment_method in ["CryptoBot", "FunPay"]:
        await process_payment(callback.message, data, state)
    else:
        await callback.message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ TX ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏")

async def process_payment(message: Message, data: dict, state: FSMContext):
    """Process payment and send order to managers"""
    try:
        username = data['username']
        await update_order_status(username, "–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ")
        
        await send_order_to_managers(data)
        
        await message.answer(
            "‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {order_statuses.get(username, '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ')}"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )
    finally:
        await state.clear()

@router.message(OrderProcess.payment_screenshot)
async def handle_payment_screenshot(message: Message, state: FSMContext):
    try:
        if not message.text:
            await message.answer(
                "‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ TX ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏)"
            )
            return
            
        data = await state.get_data()
        tx_id = message.text.strip()
        data['tx_id'] = tx_id
        
        payment_method = data.get('payment_method', '')
        if payment_method in ["Binance", "ByBit"]:
            data['payment_info'] = f"TX ID: {tx_id}"
        
        await process_payment(message, data, state)
        
    except Exception as e:
        logger.error(f"Payment TX ID error: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ TX ID.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å TX ID –µ—â–µ —Ä–∞–∑."
        )

dp.include_router(router)

async def set_commands(bot: Bot):
    commands = [
        BotCommand(
            command="start",
            description="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"
        )
    ]
    
    await bot.set_my_commands(commands, BotCommandScopeDefault())

async def main():
    try:
        await set_commands(bot)
        await dp.start_polling(bot)
    except Exception as e:
        await bot.send_message(MANAGERS_GROUP_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    import asyncio
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        asyncio.run(bot.send_message(MANAGERS_GROUP_ID, "–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"))
    except Exception as e:
        asyncio.run(bot.send_message(MANAGERS_GROUP_ID, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}"))