import uuid
# predlozhka
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
import json
import re

from telegram import CallbackQuery
from db import Database

def clean_city_name(text: str) -> str:
    emojis = ['üåÜ', 'üåÖ', 'üåá', 'üèô', 'üåÉ']
    for emoji in emojis:
        text = text.replace(emoji, ' ')
    return ' '.join(word for word in text.split() if word)

TOKEN = "8106342610:AAFzjuE9HNWd61BjuctKvrTvwCx4d5QSpJU"
MODERGROUP_ID = "-1002336497511"  # gruppa moderov
POST_DELAY = 10  # zaderjka v minutah kogda send post

CITIES = {  # id chatov
    "–ü–µ—Ä–º—å": "-1002465850721",
    "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫": "-1002366538502",
    "–ö–∞–∑–∞–Ω—å": "-1002236351628",
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä": "-1002324263770",
    "–°–∞—Ä–∞—Ç–æ–≤": "-1002325766806"
}

class PostStates(StatesGroup):
    waiting_for_city = State()
    waiting_for_content = State()
    waiting_for_confirmation = State()
    waiting_for_custom_time = State()
    waiting_for_delay_date = State()
    waiting_for_delete_confirm = State()

def get_city_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåÜ –ü–µ—Ä–º—å"), KeyboardButton(text="üåÖ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫")],
            [KeyboardButton(text="üåá –ö–∞–∑–∞–Ω—å"), KeyboardButton(text="üèô –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä")],
            [KeyboardButton(text="üåÉ –°–∞—Ä–∞—Ç–æ–≤")]
        ],
        resize_keyboard=True
    )
def get_moderation_keyboard(post_id: str):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"accept_{post_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{post_id}")
            ],
            [InlineKeyboardButton(text="‚è≥ –û—Ç–ª–æ–∂–∏—Ç—å", callback_data=f"delay_{post_id}")]
        ]
    )

def get_new_post_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )

def get_confirm_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_post"),
            InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_post")
        ],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_post")]
    ])

def get_delay_keyboard():
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delay")]
        ]
    )

def get_delay_date_keyboard():
    today = datetime.now().date()
    tomorrow = today + timedelta(days=1)
    day_after_tomorrow = today + timedelta(days=2)
    
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m')})", callback_data="delay_today")],
            [InlineKeyboardButton(text=f"üìÖ –ó–∞–≤—Ç—Ä–∞ ({tomorrow.strftime('%d.%m')})", callback_data="delay_tomorrow")],
            [InlineKeyboardButton(text=f"üìÖ –ü–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞ ({day_after_tomorrow.strftime('%d.%m')})", callback_data="delay_day_after_tomorrow")],
            [InlineKeyboardButton(text="üóì –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", callback_data="delay_custom_date")],
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delay")]
        ]
    )

def get_time_keyboard(selected_date):
    buttons = []
    for hour in range(24):
        buttons.append([
            InlineKeyboardButton(
                text=f"üïê {hour:02d}:00",
                callback_data=f"delay_time_{selected_date.isoformat()}_{hour:02d}"
            )
        ])
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delay")])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def format_username(user) -> str:
    if user or user.username:
        return f"@{user.username}"
    return user.full_name if user else "Unknown"

def get_after_post_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –ï—â–µ –æ–¥–∏–Ω –ø–æ—Å—Ç")],
            [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å")]
        ],
        resize_keyboard=True
    )

def get_final_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="/start")]
        ],
        resize_keyboard=True
    )

def get_post_keyboard(page: int, total_pages: int):
    buttons = []
    if total_pages > 1:
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"page_{page-1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"page_{page+1}"))
        buttons.append(nav_buttons)
    return InlineKeyboardMarkup(inline_keyboard=buttons)

class UserState:
    def __init__(self):
        self.users = {}  # user_id: username

    def add_user(self, user_id: int, username: str):
        self.users[user_id] = username

    def get_user_id(self, username: str) -> int:
        for user_id, stored_username in self.users.items():
            if stored_username == username:
                return user_id
        return None

class PostBot:
    def __init__(self, token):
        self.bot = Bot(token=token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.scheduled_posts = []
        self.temp_post_data = {}
        self.post_ids = {}
        self.load_posts()
        self.setup_handlers()
        self.posts_per_page = 5  #  ce per page in /del
        self.user_state = UserState()
        self.db = Database()

    def load_posts(self):
        try:
            with open('scheduled_posts.json', 'r') as f:
                self.scheduled_posts = json.load(f)
        except FileNotFoundError:
            pass

    def save_posts(self):
        with open('scheduled_posts.json', 'w') as f:
            json.dump(self.scheduled_posts, f, indent=2)

    def setup_handlers(self):

        self.dp.message.register(self.cmd_start, Command("start"))
        

        self.dp.message.register(
            self.process_city_selection,
            lambda message: message.text and any(city in clean_city_name(message.text) for city in CITIES.keys())
        )
        

        self.dp.message.register(
            self.handle_post, 
            PostStates.waiting_for_content
        )
        

        self.dp.callback_query.register(
            self.process_post_confirmation,
            lambda c: c.data in ['confirm_post', 'edit_post', 'cancel_post']
        )
        

        self.dp.callback_query.register(
            self.process_moderation, 
            lambda c: c.data or c.data.startswith(('accept_', 'reject_', 'delay_'))
        )

        self.dp.callback_query.register(
            self.process_delay_time,
            lambda c: c.data and (
                c.data.startswith(('delay_time_', 'delay_today', 'delay_tomorrow', 'delay_day_after_tomorrow')) or 
                c.data in ['cancel_delay', 'delay_custom_date']
            )
        )


        self.dp.message.register(
            self.handle_another_post,
            lambda message: message.text == "üìù –ï—â–µ –æ–¥–∏–Ω –ø–æ—Å—Ç"
        )
        

        self.dp.message.register(
            self.handle_finish,
            lambda message: message.text == "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å"
        )

        self.dp.message.register(
            self.cmd_start,
            Command("start")
        )
        self.dp.message.register(
            self.handle_custom_time,
            PostStates.waiting_for_custom_time
        )

        self.dp.message.register(
            self.cmd_delete,
            Command("del")
        )
        self.dp.callback_query.register(
            self.process_delete_confirmation,
            lambda c: c.data.startswith('delete_')
        )


        self.dp.callback_query.register(
            self.process_page_navigation,
            lambda c: c.data.startswith('page_')
        )

        self.dp.message.register(
            self.handle_message,
            lambda message: message.text and message.text.startswith('/del_')
        )

    async def cmd_start(self, message: types.Message, state: FSMContext):
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤!\n\n"
            "üåÜ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞:\n"
            "üìù –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
            "- –¢–µ–∫—Å—Ç\n"
            "- –§–æ—Ç–æ\n"
            "- –í–∏–¥–µ–æ\n"
            "- GIF-–∞–Ω–∏–º–∞—Ü–∏–∏\n\n"
            "‚ùóÔ∏è –í–∞—à –ø–æ—Å—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é"
        )
        await message.answer(welcome_text, reply_markup=get_city_keyboard())
        await state.set_state(PostStates.waiting_for_city)

    async def cmd_cancel(self, message: types.Message, state: FSMContext):
        await state.clear()
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=get_new_post_keyboard()
        )

    async def handle_cancel(self, message: types.Message, state: FSMContext):
        await state.clear()
        await message.answer(
            "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            reply_markup=get_new_post_keyboard()
        )

    async def process_city_selection(self, message: types.Message, state: FSMContext):
        if not message.text:
            return
            
        clean_text = clean_city_name(message.text)
        city = next((city for city in CITIES.keys() if city in clean_text), None)
        if not city:
            await message.answer(
                "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞",
                reply_markup=get_city_keyboard()
            )
            return
            
        await state.update_data(city=city)
        await message.answer(
            f"üéØ –í—ã–±—Ä–∞–Ω –≥–æ—Ä–æ–¥: {city}\n\n"
            f"üì§ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø–æ—Å—Ç\n"
            f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
            f"üìù –¢–µ–∫—Å—Ç\n"
            f"üñº –§–æ—Ç–æ\n"
            f"üé• –í–∏–¥–µ–æ\n"
            f"üé≠ GIF"
        )
        await state.set_state(PostStates.waiting_for_content)

    async def handle_post(self, message: types.Message, state: FSMContext):
        current_state = await state.get_state()
        if (current_state != PostStates.waiting_for_content and
            current_state != PostStates.waiting_for_custom_time):
            return
            
        data = await state.get_data()
        city = data.get('city')
        if not city:
            await message.answer(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥",
                reply_markup=get_city_keyboard()
            )
            return

        user_info = format_username(message.from_user)

        try:
            preview_text = "üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞:\n\n"
            if message.photo:
                preview = await message.copy_to(message.from_user.id)
                preview_text += message.caption or ""
            elif message.video:
                preview = await message.copy_to(message.from_user.id)
                preview_text += message.caption or ""
            elif message.animation:
                preview = await message.copy_to(message.from_user.id)
                preview_text += message.caption or ""
            else:
                preview_text += message.text or ""
                preview = await message.answer(preview_text)
            await state.update_data(
                message_id=message.message_id,
                preview_message_id=preview.message_id,
                content_type=message.content_type,
                file_id=message.photo[-1].file_id if message.photo else 
                       message.video.file_id if message.video else
                       message.animation.file_id if message.animation else None,
                caption=message.caption,
                text=message.text
            )

            confirm_message = (
                f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à –ø–æ—Å—Ç –≤—ã—à–µ\n\n"
                f"üìç –ì–æ—Ä–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {city}\n"
                f"üë§ –ê–≤—Ç–æ—Ä: {user_info}\n\n"
                f"–í—Å—ë –≤–µ—Ä–Ω–æ?"
            )
            
            await message.answer(confirm_message, reply_markup=get_confirm_keyboard())
            await state.set_state(PostStates.waiting_for_confirmation)

        except Exception as e:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    async def process_post_confirmation(self, callback: types.CallbackQuery, state: FSMContext):
        data = await state.get_data()
        
        if callback.data == "confirm_post":
            try:
                self.user_state.add_user(
                    callback.from_user.id,
                    callback.from_user.username or str(callback.from_user.id)
                )
                
                sent = None
                if data.get('content_type') in ['photo', 'video', 'animation']:
                    method = getattr(self.bot, f"send_{data['content_type']}")

                    sent = await method(
                        MODERGROUP_ID,
                        data['file_id'],
                        caption=data.get('caption', '')
                    )
                else:
                    sent = await self.bot.send_message(
                        MODERGROUP_ID,
                        data.get('text', '')
                    )

                post_id = str(uuid.uuid4().hex[:8])

                moderation_text = (
                    f"üìù –ü–æ—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É ‚¨ÜÔ∏è | ID: {post_id}\n\n"
                    f"üèô –ì–æ—Ä–æ–¥: {data['city']}\n"
                    f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {format_username(callback.from_user)}"
                )

                await self.bot.send_message(
                    MODERGROUP_ID,
                    moderation_text,
                    reply_markup=get_moderation_keyboard(str(sent.message_id)),
                    reply_to_message_id=sent.message_id
                )

                await callback.message.edit_text(
                    "‚úÖ –ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è.",
                    reply_markup=None
                )
            
                await self.bot.send_message(
                    callback.from_user.id,
                    "–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                    reply_markup=get_after_post_keyboard()
                )

            except Exception as e:
                await callback.message.edit_text(
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=None
                )

        elif callback.data == "edit_post":
            await callback.message.edit_text(
                "üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—Å—Ç–∞:",
                reply_markup=None
            )
            await state.set_state(PostStates.waiting_for_content)

        elif callback.data == "cancel_post":
            await callback.message.edit_text(
                "‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞.",
                reply_markup=None
            )
            await state.clear()

        await callback.answer(show_alert=False)

    async def process_moderation(self, callback: types.CallbackQuery, state: FSMContext):
        try:
            action, message_id = callback.data.split('_', 1)

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            original_post_id = next((line.split('ID:')[1].strip() 
                              for line in callback.message.text.split('\n') 
                              if 'ID:' in line), None)

            message_text = callback.message.text
            city = None
            username = None
            for line in message_text.split('\n'):
                if "–ì–æ—Ä–æ–¥:" in line:
                    city = line.split('–ì–æ—Ä–æ–¥:')[1].strip()
                elif "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:" in line:
                    username = line.split('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:')[1].strip()
                    username = username.lstrip('@')

            if not city:
                await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥", show_alert=True)
                return

            try:
                if username:
                    user_id = self.user_state.get_user_id(username)
                    if user_id:
                        if action == 'accept':
                            notification = "‚úÖ –í–∞—à –ø–æ—Å—Ç –æ–¥–æ–±—Ä–µ–Ω –∏ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!"
                        elif action == 'reject':
                            notification = "‚ùå –í–∞—à –ø–æ—Å—Ç –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º."
                        elif action == 'delay':
                            notification = "‚è≥ –í–∞—à –ø–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –ø–æ–∑–∂–µ."
                        
                        await self.bot.send_message(
                            chat_id=user_id,
                            text=notification
                        )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}: {e}")

            if action == 'delay':
                self.temp_post_data = {
                    'post_id': original_post_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID –ø–æ—Å—Ç–∞
                    'message_id': message_id,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                    'message': callback.message.text,
                    'city': city,
                    'approved_by': format_username(callback.from_user),
                    'original_markup': callback.message.reply_markup,
                    'chat_id': callback.message.chat.id
                }
                await callback.message.edit_text(
                    "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)\n\n"
                    "‚ùóÔ∏è –ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω:\n"
                    "- –°–µ–≥–æ–¥–Ω—è, –µ—Å–ª–∏ –≤—Ä–µ–º—è –±–æ–ª—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ\n"
                    "- –ó–∞–≤—Ç—Ä–∞, –µ—Å–ª–∏ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ —Ç–µ–∫—É—â–µ–≥–æ\n\n"
                    "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                    reply_markup=get_delay_keyboard()
                )
                await state.set_state(PostStates.waiting_for_custom_time)
                return

            if action == 'accept':
                last_time = datetime.now()
                if self.scheduled_posts:
                    last_time = datetime.fromisoformat(self.scheduled_posts[-1]['scheduled_time'])
                
                publish_time = max(datetime.now(), last_time + timedelta(minutes=POST_DELAY))
                
                new_post_id = str(uuid.uuid4().hex[:8])
                post_data = {
                    'post_id': new_post_id,
                    'message_id': message_id,  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
                    'chat_id': callback.message.chat.id,
                    'scheduled_time': publish_time.isoformat(),
                    'city': city,
                    'approved_by': format_username(callback.from_user),
                    'status': 'approved',
                    'content': callback.message.text
                }

                self.db.add_post(post_data)
                
                original_text = callback.message.text
                await callback.message.edit_text(
                    f"‚úÖ –ü–æ—Å—Ç –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {publish_time.strftime('%H:%M %d.%m.%Y')}\n\n"
                    f"{original_text}\n\n"
                    f"üë§ –û–¥–æ–±—Ä–∏–ª: {format_username(callback.from_user)}\n"
                    f"üÜî ID –ø–æ—Å—Ç–∞: {new_post_id}"
                )

            elif action == 'reject':
                await callback.message.edit_text(
                    f"‚ùå –ü–æ—Å—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω\n\n"
                    f"{callback.message.text}\n\n"
                    f"üë§ –û—Ç–∫–ª–æ–Ω–∏–ª: {format_username(callback.from_user)}"
                )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ process_moderation: {str(e)}")
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
        
        await callback.answer(show_alert=False)

    async def process_delay_time(self, callback: types.CallbackQuery, state: FSMContext):
        try:
            if callback.data == 'cancel_delay':
                await callback.message.edit_text(
                    self.temp_post_data['message'],
                    reply_markup=get_moderation_keyboard(self.temp_post_data['post_id'])
                )
                return

            if callback.data in ['delay_today', 'delay_tomorrow', 'delay_day_after_tomorrow']:
                selected_date = datetime.now().date()
                if callback.data == 'delay_tomorrow':
                    selected_date += timedelta(days=1)
                elif callback.data == 'delay_day_after_tomorrow':
                    selected_date += timedelta(days=2)

                await callback.message.edit_text(
                    f"‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ {selected_date.strftime('%d.%m.%Y')}:", 
                    reply_markup=get_time_keyboard(selected_date)
                )
                return

            if callback.data.startswith('delay_time_'):
                date_str, hour_str = callback.data.split('_')[2:]
                publish_datetime = datetime.fromisoformat(date_str).replace(
                    hour=int(hour_str), minute=0, second=0
                )

                post_id = self.temp_post_data.get('post_id', str(uuid.uuid4().hex[:8]))
                post_data = {
                    'post_id': post_id,
                    'message_id': self.temp_post_data['post_id'],
                    'chat_id': callback.message.chat.id,
                    'scheduled_time': publish_datetime.isoformat(),
                    'city': self.temp_post_data['city'],
                    'approved_by': format_username(callback.from_user),
                    'status': 'delayed'
                }
                self.db.add_post(post_data)

                await callback.message.edit_text(
                    f"‚è≥ –ü–æ—Å—Ç –æ—Ç–ª–æ–∂–µ–Ω –Ω–∞ {publish_datetime.strftime('%H:%M %d.%m.%Y')}\n\n"
                    f"{self.temp_post_data['message']}\n\n"
                    f"üë§ –û—Ç–ª–æ–∂–∏–ª: {format_username(callback.from_user)}\n"
                    f"üÜî ID –ø–æ—Å—Ç–∞: {post_id}"
                )

            await callback.answer(show_alert=False)
            
        except Exception as e:
            await callback.answer(f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)
            print(f"Error in process_delay_time: {e}")

    async def handle_custom_time(self, message: types.Message, state: FSMContext):
        try:
            time_pattern = r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$'
            if not re.match(time_pattern, message.text):
                await message.answer(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                )
                return

            hours, minutes = map(int, message.text.split(':'))
            now = datetime.now()
            publish_time = now.replace(hour=hours, minute=minutes, second=0, microsecond=0)
            
            if publish_time <= now:
                publish_time += timedelta(days=1)
            post_data = {
                'post_id': str(uuid.uuid4().hex[:8]),
                'message_id': self.temp_post_data['post_id'],
                'chat_id': self.temp_post_data['chat_id'],
                'scheduled_time': publish_time.isoformat(),
                'city': self.temp_post_data['city'],
                'approved_by': self.temp_post_data['approved_by'],
                'status': 'delayed'
            }
            self.db.add_post(post_data)

            # ce accept post v moder group and send message to user about delay || ne lomaite format
            await self.bot.edit_message_text(
                f"‚è≥ –ü–æ—Å—Ç –æ—Ç–ª–æ–∂–µ–Ω –Ω–∞ {publish_time.strftime('%H:%M %d.%m.%Y')}\n\n"
                f"{self.temp_post_data['message']}\n\n"
                f"üë§ –û—Ç–ª–æ–∂–∏–ª: {format_username(message.from_user)}",
                chat_id=self.temp_post_data['chat_id'],
                message_id=message.message_id - 1
            )
            
            await state.clear()

        except ValueError:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
            )
        except Exception as e:
            await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
            await state.clear()

    async def schedule_post(self, event, publish_time):
        post_data = {
            'post_id': str(uuid.uuid4().hex[:8]),
            'message_id': self.temp_post_data['post_id'],
            'chat_id': event.message.chat.id,
            'scheduled_time': publish_time.isoformat(),
            'city': self.temp_post_data['city'],
            'approved_by': self.temp_post_data['approved_by'],
            'status': 'delayed'
        }
        self.db.add_post(post_data)

        await event.message.edit_text(
            f"‚è≥ –ü–æ—Å—Ç –æ—Ç–ª–æ–∂–µ–Ω –Ω–∞ {publish_time.strftime('%H:%M %d.%m.%Y')}\n\n"
            f"{self.temp_post_data['message']}\n\n"
            f"üë§ –û—Ç–ª–æ–∂–∏–ª: {format_username(event.from_user)}"
        )
        await event.answer()

        # ce gud
        try:
            username = event.from_user.username or str(event.from_user.id)
            user_id = self.user_state.get_user_id(username)
            if user_id:
                await self.bot.send_message(
                    chat_id=user_id,
                    text=f"üìÖ –í–∞—à –ø–æ—Å—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ {publish_time.strftime('%H:%M %d.%m.%Y')}"
                )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")

    async def handle_another_post(self, message: types.Message, state: FSMContext):
        await message.answer(
            "üåÜ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞:",
            reply_markup=get_city_keyboard()
        )
        await state.set_state(PostStates.waiting_for_city)

    async def handle_finish(self, message: types.Message, state: FSMContext):
        await state.clear()
        await message.answer(
            "üëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞!\n"
            "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Å—Ç, –Ω–∞–∂–º–∏—Ç–µ /start",
            reply_markup=get_final_keyboard()
        )

    async def publish_posts(self):
        while True:
            try:
                posts = self.db.get_pending_posts()
                for post in posts:
                    post_id, message_id, chat_id, scheduled_time, city, approved_by, status, content, _ = post
                    try:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º message_id –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ
                        if message_id.isdigit():
                            message_id = int(message_id)
                        else:
                            raise ValueError(f"Invalid message_id: {message_id}")

                        sent_message = await self.bot.copy_message(
                            chat_id=CITIES.get(city, MODERGROUP_ID),
                            from_chat_id=MODERGROUP_ID,
                            message_id=message_id
                        )
                        
                        if sent_message:
                            await self.bot.send_message(
                                MODERGROUP_ID,
                                f"‚úÖ –ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω!\n\n"
                                f"üèô –ì–æ—Ä–æ–¥: {city}\n"
                                f"üë§ –û–¥–æ–±—Ä–∏–ª: {approved_by}\n"
                                f"üÜî ID –ø–æ—Å—Ç–∞: {post_id}"
                            )
                            self.db.mark_as_published(post_id)
                        
                    except Exception as e:
                        error_msg = str(e)
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post_id}: {error_msg}")
                        await self.bot.send_message(
                            MODERGROUP_ID,
                            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ {post_id}:\n{error_msg}"
                        )
                
                if datetime.now().minute % 5 == 0:
                    self.db.clean_old_posts()
                
                await asyncio.sleep(30)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –≤ publish_posts: {e}")
            
            await asyncio.sleep(30)

    async def cmd_delete(self, message: types.Message):
        if message.chat.id != int(MODERGROUP_ID):
            return

        cursor = self.db.conn.cursor()
        cursor.execute('''
            SELECT * FROM scheduled_posts 
            WHERE is_published = 0 
            ORDER BY scheduled_time ASC
        ''')
        active_posts = cursor.fetchall()

        if not active_posts:
            await message.reply("‚ùå –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
            return

        page = 0
        total_pages = (len(active_posts) + self.posts_per_page - 1) // self.posts_per_page
        start_idx = page * self.posts_per_page
        end_idx = min(start_idx + self.posts_per_page, len(active_posts))

        posts_list = "üìã –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n"
        for i in range(start_idx, end_idx):
            post = active_posts[i]
            post_id, message_id, chat_id, scheduled_time, city, approved_by, status, content, _ = post
            post_time = datetime.fromisoformat(scheduled_time)
            
            posts_list += (
                f"üÜî {post_id}\n"
                f"‚è∞ {post_time.strftime('%H:%M %d.%m.%Y')}\n"
                f"üìç {city}\n"
                f"üìù {status}\n"
                f"‚ùå /del_{post_id}\n\n"
            )

        posts_list += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"

        await message.reply(
            posts_list,
            reply_markup=get_post_keyboard(page, total_pages)
        )

    async def handle_message(self, message: types.Message):
        if not message.text:
            return
            
        if message.text.startswith('/del_'):
            post_id = message.text[5:].split('@')[0]
            
            cursor = self.db.conn.cursor()
            cursor.execute('SELECT * FROM scheduled_posts WHERE id = ?', (post_id,))
            post = cursor.fetchone()
            
            if post:
                post_id, message_id, chat_id, scheduled_time, city, approved_by, status, content, _ = post
                
                if str(message.chat.id) != MODERGROUP_ID:
                    await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤")
                    return
                
                cursor.execute('DELETE FROM scheduled_posts WHERE id = ?', (post_id,))
                self.db.conn.commit()
                
                post_time = datetime.fromisoformat(scheduled_time)
                await message.reply(
                    f"‚úÖ –ü–æ—Å—Ç {post_id} —É–¥–∞–ª–µ–Ω\n"
                    f"‚è∞ –í—Ä–µ–º—è: {post_time.strftime('%H:%M %d.%m.%Y')}\n"
                    f"üåÜ –ì–æ—Ä–æ–¥: {city}\n"
                    f"üë§ –£–¥–∞–ª–∏–ª: {format_username(message.from_user)}"
                )
            else:
                await message.reply("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    async def process_page_navigation(self, callback: types.CallbackQuery):
        cursor = self.db.conn.cursor()
        cursor.execute('''
            SELECT * FROM scheduled_posts 
            WHERE is_published = 0 
            ORDER BY scheduled_time ASC
        ''')
        active_posts = cursor.fetchall()
        
        page = int(callback.data.split('_')[1])
        total_pages = (len(active_posts) + self.posts_per_page - 1) // self.posts_per_page
        
        if 0 <= page < total_pages:
            start_idx = page * self.posts_per_page
            end_idx = min(start_idx + self.posts_per_page, len(active_posts))
            
            posts_list = "üìã –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã:\n\n"
            for i in range(start_idx, end_idx):
                post = active_posts[i]
                post_id, message_id, chat_id, scheduled_time, city, approved_by, status, content, _ = post
                post_time = datetime.fromisoformat(scheduled_time)
                
                posts_list += (
                    f"üÜî {post_id}\n"
                    f"‚è∞ {post_time.strftime('%H:%M %d.%m.%Y')}\n"
                    f"üìç {city}\n"
                    f"üìù {status}\n"
                    f"‚ùå /del_{post_id}\n\n"
                )

            posts_list += f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}"
            
            await callback.message.edit_text(
                posts_list,
                reply_markup=get_post_keyboard(page, total_pages)
            )

        await callback.answer(show_alert=False)

    async def process_delete_confirmation(self, callback: types.CallbackQuery):
        try:
            post_index = int(callback.data.split('_')[1])
            if 0 <= post_index < len(self.scheduled_posts):
                post = self.scheduled_posts[post_index]
                self.scheduled_posts.pop(post_index)
                self.save_posts()
                
                post_time = datetime.fromisoformat(post['scheduled_time'])
                await callback.message.edit_text(
                    f"‚úÖ –ü–æ—Å—Ç —É–¥–∞–ª–µ–Ω:\n"
                    f"üïê –í—Ä–µ–º—è: {post_time.strftime('%H:%M %d.%m.%Y')}\n"
                    f"üåÜ –ì–æ—Ä–æ–¥: {post['city']}\n"
                    f"üë§ –£–¥–∞–ª–∏–ª: {format_username(callback.from_user)}"
                )
            else:
                await callback.answer("‚ùå –ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except (ValueError, IndexError) as e:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞")
        except Exception as e:
            await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        await callback.answer(show_alert=False)

    async def process_manager_decision(self, callback: CallbackQuery):
        try:
            action, post_id = callback.data.split('_', 1)
            message_text = callback.message.text
            username = None

            # –ò–∑–≤–ª–µ–∫–∞–µ–º username –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            for line in message_text.split('\n'):
                if "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:" in line:
                    username = line.split('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:')[1].strip()
                    username = username.lstrip('@')
                    break

            if not username:
                raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            manager = format_username(callback.from_user)
            current_time = datetime.now().strftime('%H:%M %d.%m.%Y')
            
            is_approved = action == 'approve'
            status = "‚úÖ –û–¥–æ–±—Ä–µ–Ω–æ" if is_approved else "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ"

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            await callback.message.edit_text(
                f"{message_text}\n\n"
                f"{status} –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {manager}\n"
                f"‚è∞ {current_time}",
                reply_markup=None
            )

            try:
                # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ UserState
                user_id = self.user_state.get_user_id(username)
                if user_id:
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–æ—Å—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω: {status}"
                    )
                else:
                    print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ user_id –¥–ª—è username: {username}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username}: {e}")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
            await callback.answer(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—à–µ–Ω–∏—è",
                show_alert=True
            )

    async def start(self):
        asyncio.create_task(self.publish_posts())
        await self.dp.start_polling(self.bot)

    async def stop(self):
        self.db.close()

async def main():
    post_bot = PostBot(TOKEN)
    await post_bot.start()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:        pass